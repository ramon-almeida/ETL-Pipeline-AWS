AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to deploy a lambda which is triggered by an S3 event. 


Parameters:
  ResourcesBucket:
    Type: String
    Description: Enter the name of the S3 bucket where your lambda function zip file located.
  FirstTriggerBucket:
    Type: String
    Description: Enter the name of S3 trigger bucket you wish to create.
  SecondTriggerBucket:
    Type: String
    Description: Enter the name of S3 trigger bucket you wish to create.
  FirstLambdaFunctionName:
    Type: String
    Description: Lambda Function Name.
  SecondLambdaFunctionName:
    Type: String
    Description: Lambda Function Name.    
  Layer1:
    Type: String
    Description: Layer 1.
  Layer2:
    Type: String
    Description: layer 2.
  FirstPythonFileName:
    Type: String
    Description: lambda python file name.
  SecondPythonFileName:
    Type: String
    Description: lambda python file name.
  DbHost:
    Type: String
    Description: redshift host.
  DbPort:
    Type: String
    Description: redshift port.
  DbUser:
    Type: String
    Description: redshift user.
  DbPassword:
    Type: String
    Description: redshift password.
  DbDatabase:
    Type: String
    Description: redshift database name.
  DbTablePrefix:
    Type: String
    Description: redshift table prefix.
Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      # PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ScopePermissions
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:PutBucketNotification
            Resource: '*'

  LayerPandas39:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref ResourcesBucket
        S3Key: !Ref Layer1
      Description: !Join ['', [!Ref Layer1, ' at bucket ', !Ref ResourcesBucket]]
      CompatibleRuntimes:
        - python3.9

  LayerPsycopg2SqlalchemyUtils39:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref ResourcesBucket
        S3Key: !Ref Layer2
      Description: !Join ['', [!Ref Layer2, ' at bucket ', !Ref ResourcesBucket]]
      CompatibleRuntimes:
        - python3.9


  FirstMainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FirstLambdaFunctionName
      Runtime: python3.9
      Timeout: 900
      Handler: !Join ['', [!Ref FirstPythonFileName, '.lambda_handler']]
      Role: !GetAtt LambdaIAMRole.Arn
      Layers:
        - !Ref LayerPandas39
        - !Ref LayerPsycopg2SqlalchemyUtils39
      Environment:
        Variables:
          FirstTriggerBucket: !Ref FirstTriggerBucket
          SecondTriggerBucket: !Ref SecondTriggerBucket
      Code:
        S3Bucket: !Ref ResourcesBucket
        S3Key: !Join ['', [!Ref FirstPythonFileName, '.zip']]


  FirstS3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FirstMainLambda.Arn 
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${FirstTriggerBucket}'


  CreateFitstTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join ['', ['CreateTrigger-', !Ref FirstLambdaFunctionName]]
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |
            # https://aws.amazon.com/tw/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/
            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.9
      Timeout: 50

  FirstLambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: FirstS3BucketPermission
    Properties:
      ServiceToken: !GetAtt CreateFitstTriggerLambda.Arn
      LambdaArn: !GetAtt FirstMainLambda.Arn
      Bucket: !Ref FirstTriggerBucket




  SecondMainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref SecondLambdaFunctionName
      Runtime: python3.9
      Timeout: 900
      Handler: !Join ['', [!Ref SecondPythonFileName, '.lambda_handler']]
      Role: !GetAtt LambdaIAMRole.Arn
      Layers:
        - !Ref LayerPandas39
        - !Ref LayerPsycopg2SqlalchemyUtils39
      Environment:
        Variables:
          ResourcesBucket: !Ref ResourcesBucket
          SecondTriggerBucket: !Ref SecondTriggerBucket
          DbHost: !Ref DbHost
          DbPort: !Ref DbPort
          DbUser: !Ref DbUser
          DbPassword: !Ref DbPassword
          DbDatabase: !Ref DbDatabase
          DbTablePrefix: !Ref DbTablePrefix
      Code:
        S3Bucket: !Ref ResourcesBucket
        S3Key:  !Join ['', [!Ref SecondPythonFileName, '.zip']]


  SecondS3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SecondMainLambda.Arn 
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${SecondTriggerBucket}'


  CreateSecondTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join ['', ['CreateTrigger-', !Ref SecondTriggerBucket]]
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |
            # https://aws.amazon.com/tw/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/
            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.9
      Timeout: 50

  SecondLambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: SecondS3BucketPermission
    Properties:
      ServiceToken: !GetAtt CreateSecondTriggerLambda.Arn
      LambdaArn: !GetAtt SecondMainLambda.Arn
      Bucket: !Ref SecondTriggerBucket